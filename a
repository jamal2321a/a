local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua'))()
local Window = Rayfield:CreateWindow({
   Name = "Bubble Gum Simulator Infinity",
   LoadingTitle = "Bubble Gum Simulator Infinity",
   LoadingSubtitle = "by Secret",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Arrayfield"
   },
   Discord = {
      Enabled = false,
      Invite = "sirius", -- The Discord invite code, do not include discord.gg/
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Bubble Gum Simulator Infinity",
      Subtitle = "~Exploit~",
      Note = "Best Bubble Gum Simulator Script",
      FileName = "SiriusKey",
      SaveKey = false,
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = "Secret"
   }
})
local Tab = Window:CreateTab("Main", 136925977524502) -- Title, Image
local autoBubbleEnabled = false
local autoSellEnabled = false
local autoPickupEnabled = false

local Toggle = Tab:CreateToggle({
    Name = "Auto Bubble",
    Info = "", -- Optional
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        autoBubbleEnabled = Value
        if Value then
            task.spawn(function()
                while autoBubbleEnabled do
                    task.wait(0.25)
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer("BlowBubble")
                end
            end)
        end
    end,
})

local Toggle1 = Tab:CreateToggle({
    Name = "Auto Sell",
    Info = "", -- Optional
    CurrentValue = false,
    Flag = "Toggle2",
    Callback = function(Value)
        autoSellEnabled = Value
        if Value then
            task.spawn(function()
                while autoSellEnabled do
                    task.wait(2.5)

                    local args = {
                        [1] = "SellBubble"
                    }

                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                end
            end)
        end
    end,
})
 local Rendered = workspace:WaitForChild("Rendered")
                    local targetChunker = nil
                    
                    -- Find the correct Chunker folder
                    for _, chunker in ipairs(Rendered:GetChildren()) do
                        if chunker:IsA("Folder") and chunker.Name:find("Chunker") then
                            local models = chunker:GetChildren()
                            local uuidLikeCount = 0
                    
                            for _, model in ipairs(models) do
                                if model:IsA("Model") and model.Name:match("^[%x%-]+$") and #model.Name > 10 then
                                    uuidLikeCount += 1
                                end
                            end
                    
                            if uuidLikeCount > 10 then -- You can increase this threshold if needed
                                targetChunker = chunker
                                break
                            end
                        end
                    end
local Toggle2 = Tab:CreateToggle({
    Name = "Auto Pickup",
    Info = "", -- Optional
    CurrentValue = false,
    Flag = "Toggle3",
    Callback = function(Value)
        autoPickupEnabled = Value
        if Value then
            task.spawn(function()
                while autoPickupEnabled do
                    if targetChunker then
                        for _, child in ipairs(targetChunker:GetChildren()) do
                            local args = {
                                [1] = child.Name
                            }
                            game:GetService("ReplicatedStorage").Remotes.Pickups.CollectPickup:FireServer(unpack(args))
                    child:Destroy()
                        end
                    else
                        warn("No suitable Chunker folder found.")
                    end
                    task.wait(5)
                end
            end)
        end
    end,
})

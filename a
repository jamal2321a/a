local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua'))()

local Window = Rayfield:CreateWindow({
    Name = "Bubble Gum Simulator Infinity",
    LoadingTitle = "Bubble Gum Simulator Infinity",
    LoadingSubtitle = "by Secret",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Arrayfield"
    },
    Discord = {
        Enabled = false,
        Invite = "sirius",
        RememberJoins = true
    },
    KeySystem = true,
    KeySettings = {
        Title = "Bubble Gum Simulator Infinity",
        Subtitle = "~Exploit~",
        Note = "Best Bubble Gum Simulator Script",
        FileName = "SiriusKey",
        SaveKey = false,
        GrabKeyFromSite = false,
        Key = "Secret"
    }
})

local Tab = Window:CreateTab("Main", 136925977524502)
local Tab1 = Window:CreateTab("Claim", 104799707087062)

-- Toggles
local autoClaimDoggyJump = false
local autoClaimChests = false
local autoBubbleEnabled = false
local autoSellEnabled = false
local autoPickupEnabled = false
local autoClaimSpin = false
local AutoClaimPlaytime = false

-- Time converter
local function convertToSeconds(timeString)
    if string.match(timeString, "^%d+:%d+$") then
        local minutes, seconds = string.match(timeString, "(%d+):(%d+)")
        return tonumber(minutes) * 60 + tonumber(seconds)
    elseif string.match(timeString, "^%d+s$") then
        local seconds = string.match(timeString, "(%d+)s")
        return tonumber(seconds)
    else
        warn("Invalid time format: " .. timeString)
        return nil
    end
end

-- Chest timers
local Chests = {
    ["Giant Chest"] = 900,
    ["Void Chest"] = 2400
}

-- Auto Claim Chests
Tab1:CreateToggle({
    Name = "Auto Claim Chests",
    CurrentValue = false,
    Flag = "Toggle5",
    Callback = function(Value)
        autoClaimChests = Value
        task.spawn(function()
            while autoClaimChests do
                for chest, Time in pairs(Chests) do
                    local timeLeftText = workspace.Rendered.Generic[chest].Countdown.BillboardGUI.Label.Text
                    local timeLeft = convertToSeconds(timeLeftText)
                    if timeLeft and timeLeft < 61 then
                        local args = {
                            [1] = "ClaimChest",
                            [2] = chest
                        }
                        game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                    end
                end
                task.wait(60)
            end
        end)
    end,
})

-- Auto Doggy Jump
Tab1:CreateToggle({
    Name = "Auto Complete Doggy Jump (30 min Cooldown)",
    CurrentValue = false,
    Flag = "Toggle4",
    Callback = function(Value)
        autoClaimDoggyJump = Value
        task.spawn(function()
            while autoClaimDoggyJump do
                for i = 1, 3 do
                    local args = {
                        [1] = "DoggyJumpWin",
                        [2] = i
                    }
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                end
                task.wait(60)
            end
        end)
    end,
})

-- Auto Claim Spin
Tab1:CreateToggle({
    Name = "Auto Claim Spin",
    CurrentValue = false,
    Flag = "Toggle7",
    Callback = function(Value)
        autoClaimSpin = Value
        task.spawn(function()
            while autoClaimSpin do
                local args = {
                    [1] = "ClaimFreeWheelSpin"
                }
                game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                task.wait(60)
            end
        end)
    end,
})

-- Auto Claim Playtime Gifts
Tab1:CreateToggle({
    Name = "Auto Claim Playtime Gifts",
    CurrentValue = false,
    Flag = "Toggle6",
    Callback = function(Value)
        AutoClaimPlaytime = Value
        task.spawn(function()
            while AutoClaimPlaytime do
                for i = 1, 9 do
                    local args = {
                        [1] = "ClaimPlaytime",
                        [2] = i
                    }
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Function:InvokeServer(unpack(args))
                end
                task.wait(60)
            end
        end)
    end,
})

-- Auto Bubble + Sell
Tab:CreateToggle({
    Name = "Auto Bubble",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        autoBubbleEnabled = Value
        task.spawn(function()
            while autoBubbleEnabled do
                game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer("BlowBubble")
                if autoSellEnabled == true then
                    local args = {
                        [1] = "SellBubble"
                    }
                    game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
                end
            end
        end)
    end,
})

Tab:CreateToggle({
    Name = "Auto Sell",
    CurrentValue = false,
    Flag = "Toggle2",
    Callback = function(Value)
        autoSellEnabled = Value
    end,
})

-- Auto Pickup
local Rendered = workspace:WaitForChild("Rendered")
local targetChunker = nil

-- Find Chunker Folder
for _, chunker in ipairs(Rendered:GetChildren()) do
    if chunker:IsA("Folder") and chunker.Name:find("Chunker") then
        local models = chunker:GetChildren()
        local uuidLikeCount = 0
        for _, model in ipairs(models) do
            if model:IsA("Model") and model.Name:match("^[%x%-]+$") and #model.Name > 10 then
                uuidLikeCount += 1
            end
        end
        if uuidLikeCount > 10 then
            targetChunker = chunker
            break
        end
    end
end

Tab:CreateToggle({
    Name = "Auto Pickup",
    CurrentValue = false,
    Flag = "Toggle3",
    Callback = function(Value)
        autoPickupEnabled = Value
        task.spawn(function()
            while autoPickupEnabled do
                if targetChunker then
                    for _, child in ipairs(targetChunker:GetChildren()) do
                        if child and child:IsA("Model") then
                            local args = {
                                [1] = child.Name
                            }
                            game:GetService("ReplicatedStorage").Remotes.Pickups.CollectPickup:FireServer(unpack(args))
                            task.wait(0.1)
                            if child then
                                child:Destroy()
                            end
                        end
                    end
                else
                    warn("No suitable Chunker folder found.")
                end
                task.wait(2.5)
            end
        end)
    end,
})
